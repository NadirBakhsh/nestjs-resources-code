var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.046,1,1.822]],["body/controllers/AppController.html",[0,1.72,1,2.997,2,1.406,3,0.553,4,0.475,5,0.475,6,3.271,7,0.676,8,0.04,9,0.915,10,2.559,11,3.271,12,0.553,13,0.083,14,2.17,15,1.736,16,0.033,17,0.033]],["title/modules/AppModule.html",[18,1.046,19,1.822]],["body/modules/AppModule.html",[1,2.778,2,1.399,3,0.402,4,0.346,5,0.346,7,0.729,8,0.04,9,0.665,10,2.553,11,2.377,12,0.402,13,0.06,16,0.027,17,0.027,18,1.595,19,3.517,20,1.262,21,1.262,22,1.577,23,1.577,24,1.262,25,2.46,26,1.577,27,2.377,28,2.377,29,2.377,30,2.553,31,2.861,32,2.29,33,2.158,34,1.577,35,1.407,36,2.896,37,2.437,38,2.896,39,2.896,40,2.896,41,2.896]],["title/injectables/AppService.html",[10,1.44,42,1.046]],["body/injectables/AppService.html",[3,0.53,4,0.456,5,0.456,7,0.53,8,0.04,9,0.878,10,2.309,12,0.53,13,0.08,16,0.032,17,0.032,42,1.677,43,2.081,44,3.138,45,0.782,46,2.309,47,5.408,48,1.093,49,3.823,50,1.858,51,1.677,52,1.858,53,3.823,54,3.823]],["title/controllers/AuthController.html",[0,1.046,55,1.822]],["body/controllers/AuthController.html",[0,1.392,2,1.392,3,0.547,4,0.47,5,0.47,7,0.672,8,0.04,9,0.906,12,0.547,13,0.082,14,2.147,15,1.718,16,0.033,17,0.033,55,2.978,56,3.237,57,2.772,58,3.943,59,2.284,60,3.237,61,3.943]],["title/modules/AuthModule.html",[18,1.046,30,1.44]],["body/modules/AuthModule.html",[2,1.481,3,0.437,4,0.376,5,0.376,7,0.698,8,0.04,9,0.724,12,0.437,13,0.066,16,0.029,17,0.029,18,1.665,20,1.373,21,1.373,22,1.716,23,1.716,24,1.373,25,2.568,26,2.568,30,2.671,32,1.828,33,2.284,34,1.716,35,1.531,37,1.937,55,2.9,59,2.526,60,2.586,62,2.586,63,2.586,64,2.586,65,3.151,66,2.58,67,3.151,68,2.586]],["title/injectables/AuthService.html",[42,1.046,59,1.291]],["body/injectables/AuthService.html",[3,0.39,4,0.335,5,0.335,7,0.539,8,0.04,9,0.646,12,0.39,13,0.059,15,1.224,16,0.026,17,0.026,42,1.37,43,1.53,45,0.575,46,1.886,48,1.272,50,1.886,51,1.972,52,1.886,59,1.692,66,1.728,69,2.306,70,2.835,71,3.938,72,3.882,73,2.729,74,2.306,75,1.883,76,2.81,77,2.114,78,2.114,79,1.11,80,1.521,81,2.81,82,2.81,83,3.882,84,3.651,85,2.161,86,2.81,87,1.975,88,2.306,89,1.975,90,2.306,91,2.306,92,1.728,93,1.365,94,2.81,95,2.81,96,2.306]],["title/classes/CreatePostDto.html",[13,0.062,97,1.613]],["body/classes/CreatePostDto.html",[3,0.171,4,0.147,5,0.147,7,0.518,8,0.04,12,0.171,13,0.055,16,0.014,17,0.014,45,0.252,48,1.273,51,1.764,79,1.49,80,1.745,96,2.833,97,1.122,98,0.599,99,1.012,100,1.157,101,3.063,102,2.654,103,2.654,104,3.408,105,2.654,106,2.654,107,4.453,108,2.426,109,3.451,110,3.063,111,1.941,112,2.833,113,2.178,114,3.203,115,1.232,116,1.232,117,2.06,118,2.06,119,3.731,120,1.232,121,1.232,122,1.907,123,1.232,124,2.546,125,1.691,126,1.691,127,2.06,128,1.232,129,1.232,130,1.232,131,2.546,132,1.691,133,3.102,134,3.102,135,1.232,136,1.232,137,3.102,138,2.06,139,2.06,140,2.06,141,1.232,142,1.232,143,2.06,144,2.06,145,2.654,146,2.06,147,2.06,148,2.06,149,2.06,150,1.232,151,1.232,152,1.232,153,1.232,154,1.691,155,2.06,156,1.232,157,2.546,158,3.102,159,3.102,160,1.691,161,2.06,162,1.232,163,2.833,164,1.232,165,1.232,166,2.06,167,1.232,168,1.232,169,3.102,170,1.232,171,1.232,172,1.232,173,2.654,174,1.232,175,2.06,176,2.06,177,2.122,178,2.784,179,2.426,180,2.06,181,1.012,182,1.232,183,2.06,184,0.599,185,1.232,186,1.232,187,1.232,188,0.866,189,2.833,190,3.251,191,0.599,192,1.993,193,2.06,194,1.012,195,1.232,196,1.232,197,1.012,198,1.232,199,1.232,200,1.232,201,1.232,202,1.232,203,1.232,204,1.232,205,1.232,206,2.179,207,1.232,208,1.232,209,1.232,210,1.232,211,1.448,212,1.012,213,1.232]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.062,122,1.822]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.502,4,0.432,5,0.432,7,0.502,8,0.04,12,0.502,13,0.096,16,0.031,17,0.031,45,0.741,48,1.313,51,1.621,79,1.313,98,1.759,100,2.001,111,2.001,122,2.823,177,3.261,179,3.228,184,1.759,206,4.14,211,3.545,214,2.972,215,3.62,216,3.62,217,3.62]],["title/classes/CreateUserDto.html",[13,0.062,218,1.822]],["body/classes/CreateUserDto.html",[3,0.352,4,0.302,5,0.302,7,0.352,8,0.039,12,0.352,13,0.075,16,0.025,17,0.025,45,0.519,48,1.311,51,1.87,79,1.311,80,1.415,84,3.978,87,2.957,98,1.232,100,1.574,111,1.998,157,3.764,160,2.965,177,2.819,178,2.539,179,3.407,181,2.081,184,1.232,218,2.221,219,3.978,220,2.081,221,3.454,222,4.207,223,2.535,224,2.535,225,2.535,226,4.207,227,2.535,228,2.535,229,2.535,230,2.535,231,2.535,232,2.535,233,3.612,234,3.612,235,3.612,236,3.612,237,3.612,238,3.612,239,5.037,240,3.612,241,1.967,242,3.612,243,3.612,244,2.535,245,2.535,246,3.612,247,3.612,248,2.535,249,2.535,250,2.535]],["title/classes/GetUsersParamDto.html",[13,0.062,251,1.613]],["body/classes/GetUsersParamDto.html",[3,0.458,4,0.394,5,0.394,7,0.67,8,0.04,12,0.458,13,0.101,16,0.029,17,0.029,45,0.676,48,0.944,79,1.38,80,1.696,85,2.585,93,2.49,98,1.605,100,1.886,111,1.439,112,2.711,114,2.661,178,3.042,184,1.605,188,2.322,190,3.553,191,1.605,192,1.439,241,2.629,251,2.357,252,3.553,253,2.711,254,3.303,255,3.303,256,3.553,257,2.711]],["title/classes/PatchPostDto.html",[13,0.062,258,1.822]],["body/classes/PatchPostDto.html",[3,0.469,4,0.403,5,0.403,7,0.677,8,0.04,12,0.469,13,0.091,16,0.03,17,0.03,45,0.691,48,0.966,79,0.966,97,1.839,98,1.641,100,1.914,111,1.472,113,2.126,131,2.772,177,2.7,184,1.641,189,3.605,191,1.641,192,1.472,241,2.391,256,3.605,258,2.7,259,3.605,260,2.772,261,4.391,262,4.391,263,4.397,264,3.377,265,3.377,266,3.377,267,3.377]],["title/controllers/PostsController.html",[0,1.046,268,1.822]],["body/controllers/PostsController.html",[0,0.755,2,0.755,3,0.297,4,0.255,5,0.255,7,0.628,8,0.04,9,0.491,12,0.297,13,0.045,14,1.165,15,0.932,16,0.022,17,0.022,45,0.438,46,1.551,48,1.091,50,1.854,51,1.347,52,1.04,57,1.504,70,2.813,77,2.078,78,2.078,79,1.091,80,1.496,85,1.551,97,2.678,108,2.243,111,1.663,113,1.972,191,1.04,192,1.844,258,2.918,268,1.962,269,1.756,270,3.191,271,3.191,272,3.191,273,3.191,274,2.139,275,3.191,276,2.619,277,2.243,278,3.191,279,3.191,280,4.23,281,3.473,282,2.139,283,2.139,284,3.191,285,2.139,286,2.619,287,2.139,288,2.139,289,2.619,290,2.619,291,2.139,292,2.139,293,1.756,294,1.756,295,2.619,296,3.133,297,3.133,298,1.756,299,2.139,300,2.139,301,2.139,302,1.854,303,1.756,304,2.139,305,2.139,306,2.139,307,2.139,308,2.139,309,2.139,310,2.619,311,2.139,312,2.139,313,2.139,314,2.139,315,2.139,316,2.139]],["title/modules/PostsModule.html",[18,1.046,31,1.613]],["body/modules/PostsModule.html",[2,1.481,3,0.437,4,0.376,5,0.376,7,0.727,8,0.04,9,0.724,12,0.437,13,0.066,16,0.029,17,0.029,18,1.665,20,1.373,21,1.373,22,1.716,23,1.716,24,1.373,25,2.568,26,1.716,31,3.04,32,2.347,33,2.284,34,1.716,35,1.531,37,2.58,68,2.586,75,1.112,89,2.215,268,2.9,302,2.617,303,2.586,317,2.586,318,3.151,319,2.586,320,3.151,321,3.151]],["title/injectables/PostsService.html",[42,1.046,302,1.44]],["body/injectables/PostsService.html",[3,0.407,4,0.35,5,0.35,7,0.554,8,0.041,9,0.673,12,0.407,13,0.061,14,1.595,15,1.277,16,0.027,17,0.027,42,1.41,43,1.595,45,0.6,46,1.941,48,1.142,50,1.424,51,1.604,52,1.424,70,2.475,73,2.06,74,2.405,75,1.861,77,2.175,78,2.175,79,1.142,80,1.566,85,1.424,89,2.06,92,1.802,93,2.562,101,4.008,110,3.279,113,1.741,302,1.941,322,2.405,323,3.279,324,2.93,325,3.995,326,2.93,327,2.93,328,2.93,329,3.279,330,3.995]],["title/controllers/UsersController.html",[0,1.046,331,1.822]],["body/controllers/UsersController.html",[0,0.508,2,0.508,3,0.2,4,0.172,5,0.172,7,0.521,8,0.04,9,0.331,12,0.2,13,0.03,14,0.784,15,0.627,16,0.016,17,0.016,45,0.295,46,1.138,48,1.073,50,2.061,51,1.831,52,2.061,57,1.012,70,2.792,75,1.045,77,2.044,78,2.309,79,1.307,80,1.471,85,2.424,92,0.885,93,1.824,108,1.012,111,1.636,113,1.29,114,2.097,124,2.43,125,2.8,126,2.8,191,0.7,192,1.753,212,1.923,218,2.607,241,2.756,251,2.191,263,2.43,276,1.182,277,1.646,281,1.182,286,1.182,289,1.923,290,1.923,293,1.923,294,1.923,295,1.182,296,1.923,297,1.923,298,1.182,310,1.182,329,1.923,331,1.44,332,1.182,333,4.57,334,2.961,335,2.961,336,2.342,337,2.342,338,2.342,339,1.44,340,4.023,341,4.023,342,1.44,343,1.44,344,3.628,345,3.107,346,1.44,347,2.342,348,2.342,349,1.44,350,1.44,351,1.44,352,2.342,353,2.342,354,1.44,355,1.44,356,2.342,357,1.44,358,1.44,359,2.342,360,1.44,361,1.44,362,2.342,363,1.44,364,1.44,365,1.44,366,2.961,367,1.44,368,1.44,369,1.44,370,1.44,371,1.182,372,1.182,373,1.182,374,2.961,375,1.44,376,1.44,377,1.44,378,1.44,379,1.44,380,1.44,381,1.44,382,1.44,383,1.44,384,1.44,385,1.44,386,1.44,387,1.44,388,1.44,389,1.44,390,1.44,391,1.44,392,1.44,393,1.44]],["title/modules/UsersModule.html",[18,1.046,32,1.291]],["body/modules/UsersModule.html",[2,1.481,3,0.437,4,0.376,5,0.376,7,0.698,8,0.04,9,0.724,12,0.437,13,0.066,16,0.029,17,0.029,18,1.665,20,1.373,21,1.373,22,1.716,23,1.716,24,1.373,25,2.568,26,2.568,30,2.039,32,2.396,33,2.284,34,1.716,35,1.531,37,1.937,66,2.58,75,2.046,331,2.9,373,2.586,394,2.586,395,2.586,396,2.586,397,3.151,398,3.151,399,3.151]],["title/injectables/UsersService.html",[42,1.046,75,1.046]],["body/injectables/UsersService.html",[3,0.336,4,0.289,5,0.289,7,0.569,8,0.041,9,0.556,12,0.336,13,0.05,15,1.055,16,0.024,17,0.024,42,1.233,43,1.318,45,0.496,46,1.698,48,1.172,50,1.698,51,1.68,52,1.698,59,2.228,66,1.489,70,2.233,71,1.988,73,2.456,75,1.233,77,2.233,78,2.233,79,1.172,80,1.607,85,1.992,87,3.156,88,1.988,90,1.988,91,1.988,92,1.489,93,1.177,221,3.685,241,2.784,251,2.701,257,1.988,323,3.366,344,3.366,345,2.882,371,1.988,372,1.988,400,1.988,401,3.494,402,2.421,403,2.421,404,2.421,405,2.421,406,3.494,407,2.421,408,2.421,409,2.421,410,2.421,411,3.494,412,3.494,413,2.421,414,2.421]],["title/coverage.html",[415,2.83]],["body/coverage.html",[0,1.715,1,1.781,5,0.346,6,2.377,8,0.04,10,1.407,13,0.106,16,0.027,17,0.027,24,1.262,42,1.715,44,2.377,55,1.781,56,2.377,59,1.262,69,2.377,75,1.022,79,0.828,93,1.407,97,1.577,99,2.377,113,1.262,122,1.781,214,2.377,218,1.781,219,2.377,220,2.377,251,1.577,252,2.377,253,2.377,258,1.781,259,2.377,260,2.377,268,1.781,269,2.377,277,2.036,302,1.407,322,2.377,331,1.781,332,2.377,400,2.377,415,2.036,416,2.377,417,2.896,418,2.896,419,5.793,420,2.896,421,4.518,422,4.518,423,2.896,424,4.518,425,2.377,426,2.896,427,2.896,428,3.963,429,2.896,430,2.896]],["title/dependencies.html",[21,1.551,431,2.039]],["body/dependencies.html",[8,0.04,9,0.892,13,0.1,16,0.033,17,0.033,21,1.692,184,1.886,188,2.729,191,1.886,432,3.882,433,3.882,434,5.206,435,3.882,436,3.882,437,3.882,438,3.882,439,3.882,440,3.882,441,3.882,442,3.882,443,3.882,444,3.882,445,3.882]],["title/miscellaneous/enumerations.html",[446,1.527,447,2.921]],["body/miscellaneous/enumerations.html",[8,0.04,16,0.032,17,0.032,45,0.752,104,3.804,113,2.02,163,3.804,194,3.804,197,3.804,211,4.053,345,3.258,446,2.259,447,3.016,448,3.673,449,3.673,450,3.673,451,4.634,452,4.634,453,3.673,454,4.634,455,4.634]],["title/miscellaneous/functions.html",[446,1.527,456,2.921]],["body/miscellaneous/functions.html",[8,0.035,16,0.035,17,0.035,24,2.401,45,0.907,425,3.637,446,2.724,456,3.637,457,4.43]],["title/index.html",[45,0.508,458,2.483,459,2.483]],["body/index.html",[4,0.273,8,0.038,16,0.023,17,0.023,35,2.125,114,2.441,132,2.753,154,1.879,192,0.997,415,1.609,416,1.879,460,2.289,461,2.289,462,3.97,463,2.289,464,2.289,465,2.289,466,2.289,467,2.289,468,2.289,469,3.97,470,2.289,471,2.289,472,2.289,473,4.372,474,2.289,475,5.025,476,2.289,477,5.025,478,2.289,479,2.289,480,2.289,481,3.354,482,2.289,483,2.289,484,2.289,485,3.97,486,2.289,487,3.354,488,2.289,489,2.289,490,2.289,491,4.372,492,2.289,493,2.289,494,2.289,495,2.289,496,2.289,497,4.372,498,3.354,499,2.289,500,3.97,501,2.289,502,3.589,503,2.289,504,2.289,505,2.289,506,2.289,507,2.289,508,2.289,509,3.97,510,2.289,511,2.289,512,2.289,513,3.354,514,2.289,515,2.289,516,2.289,517,3.97,518,2.289,519,2.289,520,2.289,521,2.289,522,2.289,523,2.289,524,2.289,525,3.354,526,2.289,527,2.289,528,2.289,529,2.289,530,2.289,531,2.289,532,3.354,533,2.289,534,2.289,535,2.289,536,3.354,537,3.354,538,2.289,539,2.289,540,2.289,541,2.289,542,2.289,543,2.289,544,2.289,545,2.289,546,2.289,547,2.289,548,1.879,549,2.289,550,2.289,551,2.289,552,2.289,553,2.289,554,2.289,555,1.879]],["title/modules.html",[20,1.754]],["body/modules.html",[8,0.034,16,0.034,17,0.034,19,2.53,20,1.793,30,2,31,2.241,32,1.793,502,4.554,556,5.548,557,5.548,558,5.548]],["title/overview.html",[559,3.304]],["body/overview.html",[2,1.05,8,0.039,10,2.227,16,0.027,17,0.027,18,1.05,19,3.474,20,1.297,21,1.297,22,1.621,23,1.621,24,1.297,25,1.621,26,1.621,27,2.443,28,2.443,29,2.443,30,2.574,31,2.95,32,2.361,33,2.199,34,1.621,35,1.446,43,1.621,59,2.361,62,2.443,63,2.443,64,2.443,75,1.912,98,1.446,302,2.227,317,2.443,319,2.443,394,2.443,395,2.443,396,2.443,559,2.443,560,4.582,561,2.976]],["title/properties.html",[100,1.551,431,2.039]],["body/properties.html",[8,0.04,16,0.035,17,0.035,100,1.897,192,1.897,548,3.573,555,3.573,562,4.353,563,4.353,564,4.353]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":419,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":563,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":440,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":443,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":439,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":424,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":427,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":421,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":428,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":422,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":420,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":423,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["01t00:00:00.000z",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["01t00:00:00.000z'})@isiso8601()@isoptional",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":329,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":433,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":434,"title":{},"body":{"dependencies.html":{}}}],["10})@apiquery({name",{"_index":351,"title":{},"body":{"controllers/UsersController.html":{}}}],["123",{"_index":257,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/UsersService.html":{}}}],["123})@isoptional()@isint()@type(undefined",{"_index":254,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["2",{"_index":330,"title":{},"body":{"injectables/PostsService.html":{}}}],["20",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["20)@isnotempty()@matches(/^(?=.*[a",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["200",{"_index":290,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":279,"title":{},"body":{"controllers/PostsController.html":{}}}],["2020",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["4",{"_index":560,"title":{},"body":{"overview.html":{}}}],["5",{"_index":561,"title":{},"body":{"overview.html":{}}}],["50",{"_index":226,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["50)@isoptional",{"_index":229,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["7.3.0",{"_index":438,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":445,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["9",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["amazing",{"_index":542,"title":{},"body":{"index.html":{}}}],["api",{"_index":353,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":296,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":275,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apipropertyoptional",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":374,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":297,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":298,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":304,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":513,"title":{},"body":{"index.html":{}}}],["applications",{"_index":468,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["array'})@apiresponse({status",{"_index":349,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":55,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":548,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":59,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["backers",{"_index":543,"title":{},"body":{"index.html":{}}}],["blog",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["board",{"_index":535,"title":{},"body":{"index.html":{}}}],["body",{"_index":293,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":558,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":556,"title":{},"body":{"modules.html":{}}}],["building",{"_index":463,"title":{},"body":{"index.html":{}}}],["channel",{"_index":504,"title":{},"body":{"index.html":{}}}],["character",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":491,"title":{},"body":{"index.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":98,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":62,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":63,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":64,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":317,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":318,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":319,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":394,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":395,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":396,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":494,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":432,"title":{},"body":{"dependencies.html":{}}}],["console.log('createpostdto",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log('headers",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log('ip",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(isauth",{"_index":410,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(patchpostdto",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(userdata",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{}}}],["const",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":73,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":402,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["constructor(usersservice",{"_index":74,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["contain",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["content",{"_index":101,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["content'})@isstring()@isoptional",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":305,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":511,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":415,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":276,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["created",{"_index":311,"title":{},"body":{"controllers/PostsController.html":{}}}],["created.'})@post",{"_index":282,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":271,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":274,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost.dto",{"_index":267,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["createpostdto",{"_index":97,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostmetaoptions.dto",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["createpostmetaoptionsdto",{"_index":122,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["createuser",{"_index":334,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":339,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":218,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["data",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{}}}],["date",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":506,"title":{},"body":{"index.html":{}}}],["defaultvaluepipe",{"_index":364,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":365,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':userid",{"_index":356,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":478,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":519,"title":{},"body":{"index.html":{}}}],["discord",{"_index":503,"title":{},"body":{"index.html":{}}}],["dive",{"_index":505,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":416,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["draft'})@isenum(posttype)@isnotempty",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto",{"_index":301,"title":{},"body":{"controllers/PostsController.html":{}}}],["dto.ts",{"_index":260,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["dto.ts:11",{"_index":265,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["dtos/create",{"_index":369,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/createpost.dto",{"_index":299,"title":{},"body":{"controllers/PostsController.html":{}}}],["dtos/get",{"_index":371,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":300,"title":{},"body":{"controllers/PostsController.html":{}}}],["e2e",{"_index":488,"title":{},"body":{"index.html":{}}}],["each",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":464,"title":{},"body":{"index.html":{}}}],["email",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["enterprise",{"_index":524,"title":{},"body":{"index.html":{}}}],["enum",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":447,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/posttype.enum",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["error",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["experience",{"_index":508,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":437,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":261,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["false",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["featured",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":102,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["few",{"_index":492,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":328,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall",{"_index":323,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getusersparamdto",{"_index":404,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":325,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":401,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(userid",{"_index":406,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":221,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["follow",{"_index":528,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":66,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":462,"title":{},"body":{"index.html":{}}}],["full",{"_index":523,"title":{},"body":{"index.html":{}}}],["function",{"_index":426,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":456,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:userid",{"_index":286,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["get('/:userid?')@apioperation({summary",{"_index":346,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":47,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":272,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param(\"userid",{"_index":308,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":285,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":458,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":335,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(getusersparamdto",{"_index":343,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":251,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["graph",{"_index":514,"title":{},"body":{"index.html":{}}}],["grow",{"_index":539,"title":{},"body":{"index.html":{}}}],["hands",{"_index":507,"title":{},"body":{"index.html":{}}}],["handy",{"_index":495,"title":{},"body":{"index.html":{}}}],["headers",{"_index":340,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":53,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":521,"title":{},"body":{"index.html":{}}}],["here",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["https://example.com/image.jpg",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://example.com/image.jpg'})@isoptional()@isurl",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":552,"title":{},"body":{"index.html":{}}}],["https:\\/\\/schema.org",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\\\/\\\\/schema.org\",\\r\\n",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":263,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/UsersController.html":{}}}],["identifier",{"_index":417,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["indentifer",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["index",{"_index":45,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":42,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":43,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":306,"title":{},"body":{"controllers/PostsController.html":{}}}],["installcompile",{"_index":476,"title":{},"body":{"index.html":{}}}],["interact",{"_index":515,"title":{},"body":{"index.html":{}}}],["ip",{"_index":341,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":71,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isemail",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":256,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isjson",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":215,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@isemail",{"_index":223,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@length(3",{"_index":225,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@length(3",{"_index":228,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@length(8",{"_index":231,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["jane",{"_index":413,"title":{},"body":{"injectables/UsersService.html":{}}}],["jane@example.com",{"_index":414,"title":{},"body":{"injectables/UsersService.html":{}}}],["job",{"_index":532,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":534,"title":{},"body":{"index.html":{}}}],["john",{"_index":411,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@example.com",{"_index":412,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":545,"title":{},"body":{"index.html":{}}}],["json",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["json.stringify(userdata",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{}}}],["kamil",{"_index":549,"title":{},"body":{"index.html":{}}}],["key",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["lastname",{"_index":222,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["learn",{"_index":499,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["length(3",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["length(8",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letter",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":555,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":537,"title":{},"body":{"index.html":{}}}],["limit",{"_index":344,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":530,"title":{},"body":{"index.html":{}}}],["login",{"_index":72,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{}}}],["long",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["looking",{"_index":531,"title":{},"body":{"index.html":{}}}],["loop",{"_index":526,"title":{},"body":{"index.html":{}}}],["matches",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["message",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["metadata",{"_index":442,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":103,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["methods",{"_index":46,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(3",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["miscellaneous",{"_index":446,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":536,"title":{},"body":{"index.html":{}}}],["mode",{"_index":481,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":500,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":550,"title":{},"body":{"index.html":{}}}],["name",{"_index":78,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":520,"title":{},"body":{"index.html":{}}}],["nest",{"_index":469,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":554,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":497,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":435,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":436,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":277,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["node.js",{"_index":461,"title":{},"body":{"index.html":{}}}],["npm",{"_index":475,"title":{},"body":{"index.html":{}}}],["number",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":533,"title":{},"body":{"index.html":{}}}],["official",{"_index":509,"title":{},"body":{"index.html":{}}}],["one",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":538,"title":{},"body":{"index.html":{}}}],["option",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":559,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":431,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":345,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":294,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params.dto",{"_index":372,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params.dto.ts",{"_index":253,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["params.dto.ts:13",{"_index":255,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parseintpipe",{"_index":366,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":522,"title":{},"body":{"index.html":{}}}],["partial",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["partialtype",{"_index":266,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createpostdto",{"_index":262,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["passed",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":295,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch(':userid",{"_index":359,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":258,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["person",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["please",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["position",{"_index":352,"title":{},"body":{"controllers/UsersController.html":{}}}],["post",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":278,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isint()@isnotempty",{"_index":264,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["posts",{"_index":270,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":321,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":268,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":302,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":104,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":483,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":460,"title":{},"body":{"index.html":{}}}],["project",{"_index":473,"title":{},"body":{"index.html":{}}}],["properties",{"_index":100,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"properties.html":{}}}],["provided",{"_index":347,"title":{},"body":{"controllers/UsersController.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":303,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":373,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":70,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["publish",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["published",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published'})@isenum(poststatus)@isnotempty",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":105,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["put",{"_index":367,"title":{},"body":{"controllers/UsersController.html":{}}}],["put(':userid",{"_index":362,"title":{},"body":{"controllers/UsersController.html":{}}}],["query",{"_index":368,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":501,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":546,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":516,"title":{},"body":{"index.html":{}}}],["record",{"_index":280,"title":{},"body":{"controllers/PostsController.html":{}}}],["reflect",{"_index":441,"title":{},"body":{"dependencies.html":{}}}],["remove",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["removeuser",{"_index":336,"title":{},"body":{"controllers/UsersController.html":{}}}],["removeuser(@param('userid",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{}}}],["removeuser(userid",{"_index":355,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":472,"title":{},"body":{"index.html":{}}}],["required",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":493,"title":{},"body":{"index.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":52,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":348,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":50,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":452,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["run",{"_index":477,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":444,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["scalable",{"_index":465,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":451,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["schema",{"_index":106,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["select",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["serialize",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":454,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":466,"title":{},"body":{"index.html":{}}}],["service",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{}}}],["setup",{"_index":474,"title":{},"body":{"index.html":{}}}],["side",{"_index":467,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["slug",{"_index":107,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["slug'})@isstring()@isnotempty()@matches(/^[a",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["special",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["sponsors",{"_index":541,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":457,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":448,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":449,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":44,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":49,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":399,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":65,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":408,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":69,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:10",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:15",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":76,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":425,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/createpost.dto.ts",{"_index":99,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/createpost.dto.ts:100",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/createpost.dto.ts:126",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/createpost.dto.ts:27",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/createpost.dto.ts:36",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/createpost.dto.ts:47",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/createpost.dto.ts:56",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/createpost.dto.ts:64",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/createpost.dto.ts:74",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/createpost.dto.ts:82",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/createpost.dto.ts:90",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/createpostmetaoptions.dto.ts",{"_index":214,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/createpostmetaoptions.dto.ts:5",{"_index":216,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["src/posts/dtos/createpostmetaoptions.dto.ts:8",{"_index":217,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["src/posts/dtos/patch",{"_index":259,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":450,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":453,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":269,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:13",{"_index":287,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:25",{"_index":283,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:37",{"_index":292,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":320,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":322,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:5",{"_index":324,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:8",{"_index":326,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":219,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":252,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":400,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:11",{"_index":405,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:26",{"_index":407,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:6",{"_index":403,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":332,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:50",{"_index":354,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:59",{"_index":342,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:72",{"_index":363,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:77",{"_index":357,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:82",{"_index":360,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":397,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":479,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":482,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":484,"title":{},"body":{"index.html":{}}}],["started",{"_index":459,"title":{"index.html":{}},"body":{}}],["starter",{"_index":471,"title":{},"body":{"index.html":{}}}],["statements",{"_index":418,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":108,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":525,"title":{},"body":{"index.html":{}}}],["story",{"_index":455,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["string",{"_index":51,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["successfully",{"_index":281,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiquery({name",{"_index":350,"title":{},"body":{"controllers/UsersController.html":{}}}],["summary",{"_index":310,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":502,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":557,"title":{},"body":{"modules.html":{}}}],["table",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["tag1",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tag2",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tags",{"_index":109,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["test",{"_index":487,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":490,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":489,"title":{},"body":{"index.html":{}}}],["tests",{"_index":485,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":540,"title":{},"body":{"index.html":{}}}],["this.authservice.isauth",{"_index":409,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.postsservice.findall(userid",{"_index":309,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersservice.findall(getusersparamdto",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('123",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":327,"title":{},"body":{"injectables/PostsService.html":{}}}],["throw",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":517,"title":{},"body":{"index.html":{}}}],["title",{"_index":110,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["title'})@isstring()@minlength(3)@isnotempty",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["token_example",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":547,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["true})@minlength(3",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":553,"title":{},"body":{"index.html":{}}}],["type",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typescript",{"_index":470,"title":{},"body":{"index.html":{}}}],["undefined})@isoptional()@isarray()@isstring({each",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":486,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":564,"title":{},"body":{"properties.html":{}}}],["update",{"_index":289,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["updated",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{}}}],["updated.'})@patch",{"_index":291,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepartialuser",{"_index":337,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatepartialuser(@param('userid",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatepartialuser(userid",{"_index":358,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatepost",{"_index":273,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":288,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":527,"title":{},"body":{"index.html":{}}}],["updateuser",{"_index":338,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(@param('userid",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(userid",{"_index":361,"title":{},"body":{"controllers/UsersController.html":{}}}],["url",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["user",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dtos",{"_index":370,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.dtos.ts",{"_index":220,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dtos.ts:14",{"_index":227,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dtos.ts:19",{"_index":230,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dtos.ts:24",{"_index":224,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dtos.ts:33",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userdata",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{}}}],["userid",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users",{"_index":333,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":398,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":331,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":75,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":518,"title":{},"body":{"index.html":{}}}],["valid",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validator",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["version",{"_index":562,"title":{},"body":{"properties.html":{}}}],["video",{"_index":510,"title":{},"body":{"index.html":{}}}],["visit",{"_index":498,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":512,"title":{},"body":{"index.html":{}}}],["void",{"_index":284,"title":{},"body":{"controllers/PostsController.html":{}}}],["want",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":480,"title":{},"body":{"index.html":{}}}],["website",{"_index":551,"title":{},"body":{"index.html":{}}}],["working",{"_index":496,"title":{},"body":{"index.html":{}}}],["world",{"_index":54,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":529,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":544,"title":{},"body":{"index.html":{}}}],["z0",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        @Inject(forwardRef(() => UsersService))\n        private readonly usersService: UsersService\n    ) {}\n    public login(email: string, password: string, userId: string) {\n        const user = this.usersService.findOneById('123');\n        return \"TOKEN_EXAMPLE\"\n    }\n\n    public isAuth() {\n       return true \n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/createPost.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'The post content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPost.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'featured image for your blog post', example: 'https://example.com/image.jpg'})@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPost.dto.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPost.dto.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Please select the type of post', enum: postType, example: 'draft'})@IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPost.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Publish date', example: '2020-01-01T00:00:00.000Z'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPost.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be throw', example: '{\n  \"@context\": \"https:\\/\\/schema.org\",\n  \"@type\": \"Person\"\n}'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPost.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Here it is the slug for the blog post', example: 'post-url-slug'})@IsString()@IsNotEmpty()@Matches(/^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$/, {message: 'Slug must be a valid slug'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPost.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Select the status of the post', enum: postStatus, example: 'published'})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPost.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tags passed as string', example: undefined})@IsOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPost.dto.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the title for the blog post', example: 'This is a title'})@IsString()@MinLength(3)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPost.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { postStatus } from '../enums/postStatus.enum';\nimport { postType } from './../enums/postType.enum';\nimport { CreatePostMetaOptionsDto } from './createPostMetaOptions.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'This is the title for the blog post',\n    example: 'This is a title',\n  })\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    description: 'Please select the type of post',\n    enum: postType,\n    example: 'draft',\n  })\n  @IsEnum(postType)\n  @IsNotEmpty()\n  postType: postType;\n\n  @ApiProperty({\n    description: 'Here it is the slug for the blog post',\n    example: 'post-url-slug',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$/, {\n    message: 'Slug must be a valid slug',\n  })\n  slug: string;\n\n  @ApiProperty({\n    description: 'Select the status of the post',\n    enum: postStatus,\n    example: 'published',\n  })\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  status: postStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'The post content',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be throw',\n    example:\n      '{\\r\\n  \"@context\": \"https:\\\\/\\\\/schema.org\",\\r\\n  \"@type\": \"Person\"\\r\\n}',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'featured image for your blog post',\n    example: 'https://example.com/image.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'Publish date',\n    example: '2020-01-01T00:00:00.000Z',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of tags passed as string',\n    example: ['tag1', 'tag2'],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  tags: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description:\n            'the key can be any string indentifer for your meta option',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'any',\n          description: 'Any value you want to save to the key',\n          example: true,\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/createPostMetaOptions.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPostMetaOptions.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPostMetaOptions.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n  \n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Users/dtos/create-user.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Users/dtos/create-user.dtos.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Length(3, 50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Users/dtos/create-user.dtos.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(3, 50)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Users/dtos/create-user.dtos.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(8, 20)@IsNotEmpty()@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Password must be at least 8 characters long, contain one letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Users/dtos/create-user.dtos.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  Length,\n  IsNotEmpty,\n  IsOptional,\n  IsEmail,\n  Matches,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @Length(3, 50)\n  firstName: string;\n\n  @IsString()\n  @Length(3, 50)\n  @IsOptional()\n  lastName?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @Length(8, 20)\n  @IsNotEmpty()\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Password must be at least 8 characters long, contain one letter, one number, and one special character.',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Users/dtos/get-user-params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user By userId', example: 123})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Users/dtos/get-user-params.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsInt } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user By userId',\n    example: 123,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  userId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post-dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post-dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreatePostDto } from \"./createPost.dto\";\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n    @ApiProperty({\n        description: 'The ID of the post',\n    })\n    @IsInt()\n    @IsNotEmpty()\n    id: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new post'})@ApiResponse({status: 201, description: 'The record has been successfully created.'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update a post'})@ApiResponse({status: 200, description: 'The record has been successfully updated.'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/createPost.dto';\nimport { PatchPostDto } from './dtos/patch-post-dto';\nimport { PostsService } from './providers/posts.service';\n@ApiTags('Posts')\n@Controller('posts')\nexport class PostsController {\n    // Injecting Posts Service\n    constructor(private readonly postsService: PostsService) {}\n\n    @Get('/:userId')\n    public getPosts(@Param(\"userId\") userId: string) {\n        return this.postsService.findAll(userId);\n    }\n\n    @ApiOperation({\n        summary: 'Create a new post',\n    })\n    @ApiResponse({\n        status: 201,\n        description: 'The record has been successfully created.',\n    })\n    @Post()\n    public createPost(@Body() createPostDto: CreatePostDto) {\n        console.log('createPostDto', createPostDto)\n    }\n\n    @ApiOperation({\n        summary: 'Update a post',\n    })\n    @ApiResponse({\n        status: 200,\n        description: 'The record has been successfully updated.',\n    })\n    @Patch()\n    public updatePost(@Body() patchPostDto: PatchPostDto) {\n        console.log(patchPostDto)\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(private readonly usersService: UsersService) {}\n\n  public findAll(userId: string) {\n    const user = this.usersService.findOneById(userId);\n    // Find A User\n\n    return [\n      {\n        user: user,\n        title: 'Post 1',\n        content: 'Content 1',\n      },\n      {\n        user: user,\n        title: 'Post 2',\n        content: 'Content 2',\n      },\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUser\n                            \n                            \n                                    \n                                    Public\n                                removeUser\n                            \n                            \n                                    \n                                    Public\n                                updatePartialUser\n                            \n                            \n                                    \n                                    Public\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto, headers: any, ip: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/Users/users.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')@ApiOperation({summary: 'Get users by userId or all, if no userId is provided users will be returned as an array'})@ApiResponse({status: 200, description: 'Returns an array of users successfully'})@ApiQuery({name: 'limit', type: Number, required: false, description: 'Limit the number of users', example: 10})@ApiQuery({name: 'page', type: Number, required: false, description: 'The position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/Users/users.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        removeUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeUser(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':userId')\n                \n            \n\n                    \n                        \n                            Defined in src/Users/users.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updatePartialUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePartialUser(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':userId')\n                \n            \n\n                    \n                        \n                            Defined in src/Users/users.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':userId')\n                \n            \n\n                    \n                        \n                            Defined in src/Users/users.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  DefaultValuePipe,\n  Delete,\n  Get,\n  Headers,\n  Ip,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Put,\n  Query,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dtos';\nimport { GetUsersParamDto } from './dtos/get-user-params.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get('/:userId?')\n  @ApiOperation({\n    summary:\n      'Get users by userId or all, if no userId is provided users will be returned as an array',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Returns an array of users successfully',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: Number,\n    required: false,\n    description: 'Limit the number of users',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: Number,\n    required: false,\n    description:\n      'The position of the page number that you want the API to return',\n    example: 1,\n  })\n  public getUser(\n    @Param() getUsersParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUsersParamDto, limit, page);\n  }\n\n  @Post()\n  public createUser(\n    @Body() createUserDto: CreateUserDto,\n    @Headers() headers: any,\n    @Ip() ip: string,\n  ) {\n    const userData = createUserDto;\n    console.log(userData);\n    console.log('Headers:', headers);\n    console.log('ip:', ip);\n    return `Create user with data: ${JSON.stringify(userData)}`;\n  }\n\n  @Put(':userId')\n  public updateUser(@Param('userId') userId: string) {\n    return `Update user with ID ${userId}`;\n  }\n\n  @Delete(':userId')\n  public removeUser(@Param('userId') userId: string) {\n    return `Remove user with ID ${userId}`;\n  }\n\n  @Patch(':userId')\n  public updatePartialUser(@Param('userId') userId: string) {\n    return `Update partial user with ID ${userId}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  imports: [forwardRef(() => AuthModule)],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Users/providers/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/Users/providers/users.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Users/providers/users.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Users/providers/users.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { userId: number; firstName: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-user-params.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService\n  ) {}\n  public findAll(\n    getUsersParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    const isAuth = this.authService.isAuth();\n    console.log(isAuth);\n    return [\n      { firstName: 'John', email: 'john@example.com' },\n      { firstName: 'Jane', email: 'jane@example.com' },\n    ];\n  }\n\n\n\n  findOneById(userId: string) {\n    return { userId: 123, firstName: 'John', email: 'john@example.com' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/Users/dtos/create-user.dtos.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/Users/dtos/get-user-params.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/Users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/Users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/createPost.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/createPostMetaOptions.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post-dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
